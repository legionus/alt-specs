%define _unpackaged_files_terminate_build 1
#
#   - PDF::Reuse -
#   This spec file was automatically generated by cpan2rpm [ver: 2.027]
#   (ALT Linux revision)
#   The following arguments were used:
#       PDF-Reuse-0.33.tar.gz
#   For more information on cpan2rpm please visit: http://perl.arix.com/
#

%define module PDF-Reuse
%define m_distro PDF-Reuse
%define m_name PDF::Reuse
%define m_author_id unknown
%define _enable_test 1

Name: perl-PDF-Reuse
Version: 0.39
Release: alt1

Summary: Reuse and mass produce PDF documents   

License: Artistic
Group: Development/Perl
Url: http://www.cpan.org

Packager: Vladimir A. Svyatoshenko <svyt@altlinux.ru>

BuildArch: noarch
Source: http://www.cpan.org/authors/id/C/CN/CNIGHS/PDF-Reuse-%{version}.tar.gz

# Automatically added by buildreq on Fri Jul 04 2008
BuildRequires: perl-Compress-Zlib perl-devel perl(Test/Deep.pm) perl(Text/PDF/TTFont0.pm) perl(Font/TTF.pm)

%description
This module could be used when you want to mass produce similar (but not identical)
PDF documents and reuse templates, JavaScripts and some other components. It is
functional to be fast, and to give your programs capacity to produce many pages
per second and very big PDF documents if necessary.

The module produces PDF-1.4 files. Some features of PDF-1.5, like "object streams"
and "cross reference streams", are supported, but only at an experimental level. More
testing is needed. (If you get problems with a new document from Acrobat 6 or 7, try to
save it or recreate it as a PDF-1.4 document first, before using it together with
this module.)

=over 2

=item Templates

Use your favorite program, probably a commercial visual tool, to produce single
PDF-files to be used as templates, and then use this module to mass produce files
from them.

(If you want small PDF-files or want special graphics, you can use this module also,
but visual tools are often most practical.)

=item Lists

The module uses "XObjects" extensively. This is a format that makes it possible
create big lists, which are compact at the same time.

=item PDF-operators

The module gives you a good possibility to program at a "low level" with the basic
graphic operators of PDF, if that is what you want to do. You can build your
own libraries of low level routines, with PDF-directives "controlled" by Perl.

=item Archive-format

If you want, you get your new documents logged in a format suitable for archiving
or transfer.

PDF::Reuse::Tutorial might show you best what you can do with this module.

=item JavaScript

You can attach JavaScripts to your PDF-files.

You can have libraries of JavaScripts. No cutting or pasting, and those who include
the scripts in documents only need to know how to initiate them. (Of course those
who write the scripts have to know Acrobat JavaScript well.)

=back

%prep
%setup -q -n %m_distro-%version
%build
%perl_vendor_build

%install
%perl_vendor_install

%files
%perl_vendor_privlib/auto/PDF*
%perl_vendor_privlib/PDF*

%changelog
* Thu Nov 17 2016 Igor Vlasenko <viy@altlinux.ru> 0.39-alt1
- automated CPAN update

* Tue Dec 16 2014 Igor Vlasenko <viy@altlinux.ru> 0.36-alt1
- automated CPAN update

* Mon Nov 22 2010 Igor Vlasenko <viy@altlinux.ru> 0.35-alt2.1
- repair after perl 5.12 upgrade using girar-nmu

* Mon Oct 20 2008 Vladimir A. Svyatoshenko <svyt@altlinux.ru> 0.35-alt2
- fixed include privlib/auto/PDF/Reuse/*

* Tue Oct 07 2008 Vladimir A. Svyatoshenko <svyt@altlinux.ru> 0.35-alt1
- new version
- fixed build

* Fri Jul 04 2008 Vladimir A. Svyatoshenko <svyt@altlinux.ru> 0.33-alt1
- first build for ALT Linux Sisyphus

