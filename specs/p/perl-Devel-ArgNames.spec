BuildRequires: perl-PadWalker perl-devel
#
#   - Devel::ArgNames -
#   This spec file was automatically generated by cpan2rpm [ver: 2.028]
#   (ALT Linux revision)
#   The following arguments were used:
#       '--packager=Igor Vlasenko <viy@altlinux.ru>' --no-depchk --url http://search.cpan.org/CPAN/authors/id/N/NU/NUFFIN/Devel-ArgNames-0.03.tar.gz http://search.cpan.org/CPAN/authors/id/N/NU/NUFFIN/Devel-ArgNames-0.03.tar.gz
#   For more information on cpan2rpm please visit: http://perl.arix.com/
#

%define module Devel-ArgNames
%define m_distro Devel-ArgNames
%define m_name Devel::ArgNames
%define m_author_id unknown
%define _disable_test 1

Name: perl-Devel-ArgNames
Version: 0.03
Release: alt1

Summary: Figure out the names of variables passed into subroutines

License: Artistic
Group: Development/Perl
Url: http://search.cpan.org/CPAN/authors/id/N/NU/NUFFIN/Devel-ArgNames-0.03.tar.gz

Packager: Igor Vlasenko <viy@altlinux.ru>

BuildArch: noarch
Source: http://search.cpan.org/CPAN/authors/id/N/NU/NUFFIN/%m_distro-%version.tar.gz

%description
When print-debugging code, you will often find yourself going:

	print "\$foo is $foo, \$bar is $bar"

With this module, you can write a reusable subroutine easily:

	sub my_print_vars {
		my %%vars;

		@vars{arg_names()} = @_;

		foreach my $var ( keys %%vars ) {
			warn "$var is $vars{$var}\n";
		}
	}

	my_print_vars($foo, $bar);

This module doesn't provide dumping facilities because there are too many to
choose from. This is a DIY kit ;-)

%prep
%setup -n %m_distro-%version
%build
%perl_vendor_build

%install
%perl_vendor_install

%files
%perl_vendor_privlib/Devel/*

%changelog
* Thu Sep 22 2011 Igor Vlasenko <viy@altlinux.ru> 0.03-alt1
- furst build

